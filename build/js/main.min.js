/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/form/init-custom-select */ "./js/modules/form/init-custom-select.js");
/* harmony import */ var _modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/form/init-form-validate */ "./js/modules/form/init-form-validate.js");
/* harmony import */ var _modules_to_do__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./modules/to-do */ "./js/modules/to-do.js");




 // ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------
  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])(); // Modules
  // ---------------------------------

  Object(_modules_to_do__WEBPACK_IMPORTED_MODULE_4__["initToDo"])();
  Object(_modules_form_init_custom_select__WEBPACK_IMPORTED_MODULE_2__["initCustomSelect"])(); // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана

  window.addEventListener('load', function () {
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
    Object(_modules_form_init_form_validate__WEBPACK_IMPORTED_MODULE_3__["initFormValidate"])();
  });
}); // ---------------------------------
// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.
// привязывайте js не на классы, а на дата атрибуты (data-validate)
// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✔️
// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.
// для адаптивного JS используейтся matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();
// используйте .closest(el)

/***/ }),

/***/ "./js/modules/form/_custom-select.js":
/*!*******************************************!*\
  !*** ./js/modules/form/_custom-select.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CustomSelect; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var CLASS_NAME_SELECT = 'select';
var CLASS_NAME_ACTIVE = 'select_show';
var CLASS_NAME_SELECTED = 'select__option_selected';
var SELECTOR_ACTIVE = '.select_show';
var SELECTOR_DATA = '[data-select]';
var SELECTOR_DATA_TOGGLE = '[data-select="toggle"]';
var SELECTOR_OPTION_SELECTED = '.select__option_selected';

var CustomSelect = /*#__PURE__*/function () {
  function CustomSelect(target, params) {
    _classCallCheck(this, CustomSelect);

    this._elRoot = typeof target === 'string' ? document.querySelector(target) : target;
    this._params = params || {};

    if (this._params['options']) {
      this._elRoot.classList.add(CLASS_NAME_SELECT);

      this._elRoot.innerHTML = CustomSelect.template(this._params);
    }

    this._elToggle = this._elRoot.querySelector(SELECTOR_DATA_TOGGLE);

    this._elRoot.addEventListener('click', this._onClick.bind(this));
  }

  _createClass(CustomSelect, [{
    key: "_onClick",
    value: function _onClick(e) {
      var target = e.target;
      var type = target.closest(SELECTOR_DATA).dataset.select;

      switch (type) {
        case 'toggle':
          this.toggle();
          break;

        case 'option':
          this._changeValue(target);

          break;
      }
    }
  }, {
    key: "_update",
    value: function _update(option) {
      option = option.closest('.select__option');

      var selected = this._elRoot.querySelector(SELECTOR_OPTION_SELECTED);

      if (selected) {
        selected.classList.remove(CLASS_NAME_SELECTED);
      }

      option.classList.add(CLASS_NAME_SELECTED);
      this._elToggle.textContent = option.textContent;
      this._elToggle.value = option.dataset['value'];
      this._elToggle.dataset.index = option.dataset['index'];

      this._elRoot.dispatchEvent(new CustomEvent('select.change'));

      this._params.onSelected ? this._params.onSelected(this, option) : null;
      return option.dataset['value'];
    }
  }, {
    key: "_reset",
    value: function _reset() {
      var selected = this._elRoot.querySelector(SELECTOR_OPTION_SELECTED);

      if (selected) {
        selected.classList.remove(CLASS_NAME_SELECTED);
      }

      this._elToggle.textContent = 'Выберите из списка';
      this._elToggle.value = '';
      this._elToggle.dataset.index = -1;

      this._elRoot.dispatchEvent(new CustomEvent('select.change'));

      this._params.onSelected ? this._params.onSelected(this, null) : null;
      return '';
    }
  }, {
    key: "_changeValue",
    value: function _changeValue(option) {
      if (option.classList.contains(CLASS_NAME_SELECTED)) {
        return;
      }

      this._update(option);

      this.hide();
    }
  }, {
    key: "show",
    value: function show() {
      document.querySelectorAll(SELECTOR_ACTIVE).forEach(function (select) {
        select.classList.remove(CLASS_NAME_ACTIVE);
      });

      this._elRoot.classList.add(CLASS_NAME_ACTIVE);
    }
  }, {
    key: "hide",
    value: function hide() {
      this._elRoot.classList.remove(CLASS_NAME_ACTIVE);
    }
  }, {
    key: "toggle",
    value: function toggle() {
      if (this._elRoot.classList.contains(CLASS_NAME_ACTIVE)) {
        this.hide();
      } else {
        this.show();
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      this._elRoot.removeEventListener('click', this._onClick);
    }
  }, {
    key: "value",
    get: function get() {
      return this._elToggle.value;
    },
    set: function set(value) {
      var _this = this;

      var isExists = false;

      this._elRoot.querySelectorAll('.select__option').forEach(function (option) {
        if (option.dataset['value'] === value) {
          isExists = true;
          return _this._update(option);
        }
      });

      if (!isExists) {
        return this._reset();
      }
    }
  }, {
    key: "selectedIndex",
    get: function get() {
      return this._elToggle.dataset['index'];
    },
    set: function set(index) {
      var option = this._elRoot.querySelector(".select__option[data-index=\"".concat(index, "\"]"));

      if (option) {
        return this._update(option);
      }

      return this._reset();
    }
  }]);

  return CustomSelect;
}();



CustomSelect.template = function (params) {
  var name = params['name'];
  var options = params['options'];
  var targetValue = params['targetValue'];
  var items = [];
  var selectedIndex = -1;
  var selectedValue = '';
  var selectedContent = 'Выберите из списка';
  options.forEach(function (option, index) {
    var selectedClass = '';

    if (option[0] === targetValue) {
      selectedClass = ' select__option_selected';
      selectedIndex = index;
      selectedValue = option[0];
      selectedContent = option[1];
    }

    items.push("<li class=\"select__option".concat(selectedClass, "\" data-select=\"option\" data-value=\"").concat(option[0], "\" data-index=\"").concat(index, "\">").concat(option[1], "</li>"));
  });
  return "<button type=\"button\" class=\"select__toggle\" name=\"".concat(name, "\" value=\"").concat(selectedValue, "\" data-select=\"toggle\" data-index=\"").concat(selectedIndex, "\">").concat(selectedContent, "</button>\n  <div class=\"select__dropdown\">\n    <ul class=\"select__options\">").concat(items.join(''), "</ul>\n  </div>");
};

document.addEventListener('click', function (e) {
  if (!e.target.closest('.select')) {
    document.querySelectorAll(SELECTOR_ACTIVE).forEach(function (select) {
      select.classList.remove(CLASS_NAME_ACTIVE);
    });
  }
});

/***/ }),

/***/ "./js/modules/form/form-validate.js":
/*!******************************************!*\
  !*** ./js/modules/form/form-validate.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FormsValidate; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

// Константы и переменные
var BASE_COUNTRY_CODE = '+7';
var BASE_MATRIX = '(___) ___ __ __';
var phoneLength = BASE_COUNTRY_CODE.length + BASE_MATRIX.length; // Ограничения ввода для обычных полей

var returnLimitationsRegEx = function returnLimitationsRegEx(dataLimitations) {
  switch (dataLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^a-zA-Zа-яёА-ЯЁ\-\s]/g;

    case 'letters':
      return /[^a-zA-Zа-яёА-ЯЁ\s]/g;

    case 'letters-and-digit':
      return /[^a-zA-Zа-яёА-ЯЁ\s\d]/g;

    case 'cyrillic':
      return /[^а-яёА-ЯЁ\s]/g;

    case 'latin':
      return /[^a-zA-Z\s]/g;

    default:
      return false;
  }
};

var simpleLimitations = function simpleLimitations(formElement, dataLimitations) {
  var RegEx = returnLimitationsRegEx(dataLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      formElement.value = formElement.value.replace(RegEx, '');
    });
    return;
  } // eslint-disable-next-line no-console


  console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
}; // Ограничения ввода для обычных полей с матрицей


var returnMatrixLimitationsRegEx = function returnMatrixLimitationsRegEx(dataMatrixLimitations) {
  switch (dataMatrixLimitations) {
    case 'digit':
      return /[^\d]/g;

    case 'name':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\-]]/g;

    case 'letters':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z]/g;

    case 'letters-and-digit':
      return /[^\а-яё\А-ЯЁ\a-z\A-Z\d]/g;

    case 'cyrillic':
      return /[^\а-яё\А-ЯЁ]/g;

    case 'latin':
      return /[^\a-z\A-Z]/g;

    default:
      return false;
  }
};

var initMatrixReplace = function initMatrixReplace(target, matrix, RegEx) {
  var def = matrix.replace(RegEx, '');
  var val = target.value.replace(RegEx, '');
  var i = 0;

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\^]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var simpleMatrix = function simpleMatrix(formElement, dataMatrix, dataMatrixLimitations) {
  if (dataMatrixLimitations === null) {
    // eslint-disable-next-line no-console
    console.error('При валидации по матрице обязательно указывать формат ограничений: data-matrix-limitations=""');
    return;
  }

  var RegEx = returnMatrixLimitationsRegEx(dataMatrixLimitations);

  if (RegEx) {
    formElement.addEventListener('input', function () {
      initMatrixReplace(formElement, dataMatrix, RegEx);
    });
  } else {
    // eslint-disable-next-line no-console
    console.error("\u041F\u0435\u0440\u0435\u0434\u0430\u043D\u043D\u044B\u0439 \u0444\u043E\u0440\u043C\u0430\u0442 \u043E\u0433\u0440\u0430\u043D\u0438\u0447\u0435\u043D\u0438\u044F: ".concat(dataMatrixLimitations, ", \u043D\u0435 \u043F\u043E\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442\u0441\u044F. \u041F\u0440\u043E\u0432\u0435\u0440\u044C\u0442\u0435 \u043A\u043E\u0440\u0440\u0435\u043A\u0442\u043D\u043E\u0441\u0442\u044C \u0432\u0432\u0435\u0434\u0451\u043D\u043D\u044B\u0445 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0439 \u0432 \u0441\u043E\u043E\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043E \u0441\u043F\u0435\u0446\u0438\u0444\u0438\u043A\u0430\u0446\u0438\u0435\u0439."));
  }
}; // Маска для телефона


var onInputPhoneInput = function onInputPhoneInput(_ref) {
  var target = _ref.target;
  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = target.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  target.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var prettifyPhoneInput = function prettifyPhoneInput(input) {
  if (!input.value.startsWith(BASE_COUNTRY_CODE)) {
    if (input.value.startsWith('8')) {
      input.value = input.value.replace('8', BASE_COUNTRY_CODE);
    } else {
      input.value = "".concat(BASE_COUNTRY_CODE).concat(input.value);
    }
  } // onInputPhoneInput({input});


  var matrix = "".concat(BASE_COUNTRY_CODE).concat(BASE_MATRIX);
  var def = matrix.replace(/\D/g, '');
  var i = 0;
  var val = input.value.replace(/\D/g, '');

  if (def.length >= val.length) {
    val = def;
  }

  input.value = matrix.replace(/./g, function (a) {
    if (/[_\d]/.test(a) && i < val.length) {
      return val.charAt(i++);
    } else if (i >= val.length) {
      return '';
    } else {
      return a;
    }
  });
};

var onFocusPhoneInput = function onFocusPhoneInput(_ref2) {
  var target = _ref2.target;

  if (!target.value) {
    target.value = BASE_COUNTRY_CODE;
  }

  target.addEventListener('input', onInputPhoneInput);
  target.addEventListener('blur', onBlurPhoneInput);
  target.addEventListener('keydown', onKeydownPhoneInput);
};

var onKeydownPhoneInput = function onKeydownPhoneInput(e) {
  if (e.target.selectionStart === 1 && e.keyCode === 8 || e.keyCode === 46) {
    e.preventDefault();
  }

  if (e.target.selectionStart <= phoneLength && e.keyCode !== 8 && e.keyCode !== 46 && e.keyCode !== 37 && e.keyCode !== 39) {
    e.target.setSelectionRange(phoneLength, phoneLength);
  }
};

var onBlurPhoneInput = function onBlurPhoneInput(_ref3) {
  var target = _ref3.target;

  if (target.value === BASE_COUNTRY_CODE) {
    var parent = target.closest('[data-validate-type="phone"]');
    target.value = '';
    parent.classList.remove('not-empty');
    target.removeEventListener('input', onInputPhoneInput);
    target.removeEventListener('blur', onBlurPhoneInput);
  }
}; // Показ ошибок полей форм


var hideError = function hideError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'true');
    el.classList.remove('is-invalid');
    el.classList.add('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'false');
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  }
};

var showError = function showError(el) {
  if (el.classList.contains('toggle-group')) {
    validateToggleGroup(el);
    el.setAttribute('aria-invalid', 'false');
    el.classList.add('is-invalid');
    el.classList.remove('is-valid');
  } else {
    var parent = el.closest('[data-validate-type]');
    el.setAttribute('aria-invalid', 'true');
    parent.classList.add('is-invalid');
    parent.classList.remove('is-valid');
  }
};

var showInputsError = function showInputsError(inputs) {
  var flag = true;
  var result = true;
  inputs.forEach(function (input) {
    var type = input.closest('[data-validate-type]').dataset.validateType;

    if (type === 'toggle-group') {
      return;
    }

    flag = validateInputs(type, input);

    if (!flag) {
      result = flag;
      showError(input);
    } else {
      hideError(input);
    }
  });
  return result;
};

var showGroupInputsError = function showGroupInputsError(parents) {
  var flag = true;
  var result = true;

  if (!parents.length) {
    return result;
  }

  parents.forEach(function (parent) {
    flag = validateToggleGroup(parent);

    if (!flag) {
      result = flag;
      showError(parent);
    } else {
      hideError(parent);
    }
  });
  return result;
};

var showErrors = function showErrors(inputs, parents) {
  var result = true;
  var inputsResult = showInputsError(inputs);
  var groupResult = showGroupInputsError(parents);

  if (!inputsResult || !groupResult) {
    result = false;
  }

  return result;
}; // Валидация полей форм


var validateTextInput = function validateTextInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var minLength = +input.getAttribute('minlength');

  if (!minLength) {
    minLength = 1;
  }

  if (input.value.length >= minLength) {
    parent.classList.add('is-valid');
    parent.classList.remove('is-invalid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validatePhoneInput = function validatePhoneInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.value.length >= phoneLength) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateEmailInput = function validateEmailInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var emailString = /[a-zA-Zа-яёА-ЯЁ0-9]{1}([a-zA-Zа-яёА-ЯЁ0-9\-_\.]{1,})?@[a-zA-Zа-яёА-ЯЁ0-9\-]{1}([a-zA-Zа-яёА-ЯЁ0-9.\-]{1,})?[a-zA-Zа-яёА-ЯЁ0-9\-]{1}\.[a-zA-Zа-яёА-ЯЁ]{2,6}/;
  var regEmail = new RegExp(emailString, '');

  if (regEmail.test(input.value)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var validateMatrixInput = function validateMatrixInput(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;
  var matrix = input.closest('[data-matrix]').dataset.matrix;

  if (input.value.length === matrix.length) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    flag = false;
  }

  return flag;
};

var findSelectedOption = function findSelectedOption(options) {
  var flag = false;
  options.forEach(function (option) {
    if (option.value && option.selected) {
      flag = true;
    }
  });
  return flag;
};

var validateSelect = function validateSelect(input) {
  var parent = input.closest('[data-validate-type]');
  var options = input.querySelectorAll('option');
  var customSelectText = parent.querySelector('.custom-select__text');
  input.setAttribute('aria-invalid', 'false');
  var flag = true;

  if (findSelectedOption(options)) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
    input.setAttribute('aria-invalid', 'false');
  } else {
    parent.classList.remove('is-valid');
    input.setAttribute('aria-invalid', 'true');
    customSelectText.innerHTML = '';
    parent.classList.remove('not-empty');
    flag = false;
  }

  return flag;
};

var validateCheckbox = function validateCheckbox(input) {
  var parent = input.closest('[data-validate-type]');
  var flag = true;

  if (input.checked) {
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var validateInputs = function validateInputs(type, input) {
  switch (type) {
    case 'text':
      return validateTextInput(input);

    case 'phone':
      return validatePhoneInput(input);

    case 'email':
      return validateEmailInput(input);

    case 'matrix':
      return validateMatrixInput(input);

    case 'select':
      return validateSelect(input);

    case 'checkbox':
      return validateCheckbox(input);

    default:
      return false;
  }
};

var returnCheckedElements = function returnCheckedElements(inputs) {
  var flag = false;
  inputs.forEach(function (input) {
    if (input.checked) {
      flag = true;
    }
  });
  return flag;
};

var removeGroupAria = function removeGroupAria(inputs) {
  inputs.forEach(function (input) {
    if (!input.checked) {
      input.removeAttribute('aria-required');
      input.removeAttribute('aria-invalid');
    } else {
      input.setAttribute('aria-required', true);
      input.setAttribute('aria-invalid', false);
    }
  });
};

var setGroupAria = function setGroupAria(inputs) {
  inputs.forEach(function (input) {
    input.setAttribute('aria-required', true);
    input.setAttribute('aria-invalid', true);
  });
};

var validateToggleGroup = function validateToggleGroup(parent) {
  var formElements = parent.querySelectorAll('input');
  var flag = true;

  if (returnCheckedElements(formElements)) {
    removeGroupAria(formElements);
    parent.classList.remove('is-invalid');
    parent.classList.add('is-valid');
  } else {
    setGroupAria(formElements);
    parent.classList.remove('is-valid');
    flag = false;
  }

  return flag;
};

var checkInputValidity = function checkInputValidity(type, input) {
  validateInputs(type, input);
}; // Установка всех действий в полях форм


var formElementLimitationsAction = function formElementLimitationsAction(formValidateElement) {
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataLimitations) {
    simpleLimitations(formElement, dataLimitations);
  }
};

var formElementMatrixAction = function formElementMatrixAction(formValidateElement) {
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;
  var formElement = formValidateElement.querySelector('input');

  if (!formElement) {
    formElement = formValidateElement.querySelector('textarea');
  }

  if (!formElement) {
    // eslint-disable-next-line no-console
    console.error('В валидируемом блоке отсутствует поле формы');
    return;
  }

  if (dataMatrix) {
    simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
  }
};

var formElementValidateAction = function formElementValidateAction(formValidateElement) {
  var dataValidateType = formValidateElement.dataset.validateType;
  var dataLimitations = formValidateElement.dataset.limitations ? formValidateElement.dataset.limitations : null;
  var dataMatrix = formValidateElement.dataset.matrix ? formValidateElement.dataset.matrix : null;
  var dataMatrixLimitations = formValidateElement.dataset.matrixLimitations ? formValidateElement.dataset.matrixLimitations : null;

  if (dataValidateType !== 'toggle-group') {
    var formElement = formValidateElement.querySelector('input');

    if (!formElement) {
      formElement = formValidateElement.querySelector('textarea');
    }

    if (!formElement) {
      formElement = formValidateElement.querySelector('select');
    }

    if (!formElement) {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствует поле формы');
      return;
    }

    formElement.setAttribute('aria-required', true);
    formElement.setAttribute('aria-invalid', true);

    if (dataLimitations) {
      simpleLimitations(formElement, dataLimitations);
    }

    if (dataMatrix) {
      simpleMatrix(formElement, dataMatrix, dataMatrixLimitations);
    }

    if (dataValidateType === 'phone') {
      if (formElement.value) {
        prettifyPhoneInput(formElement);
      }

      formElement.addEventListener('focus', onFocusPhoneInput);
    }

    formElement.addEventListener('input', function () {
      checkInputValidity(dataValidateType, formElement);
    });
    checkInputValidity(dataValidateType, formElement);
  } else {
    var formElements = formValidateElement.querySelectorAll('input');

    if (formElements.length) {
      formElements.forEach(function (el) {
        el.setAttribute('aria-required', true);
        el.setAttribute('aria-invalid', true);
        el.addEventListener('input', function () {
          validateToggleGroup(formValidateElement);
        });
      });
      validateToggleGroup(formValidateElement);
    } else {
      // eslint-disable-next-line no-console
      console.error('В валидируемом блоке отсутствуют поля формы');
      return;
    }
  }
}; // Обработка события submit на форме


var onFormSubmit = function onFormSubmit(e, callback) {
  var formElements = e.target.querySelectorAll('[aria-required="true"]');
  var groupsFormElement = e.target.querySelectorAll('[data-validate-type="toggle-group"]');

  if (showErrors(formElements, groupsFormElement) && callback && callback.validationSuccessCallback) {
    callback.validationSuccessCallback(e);
  } else if (callback && callback.validationErrorCallback) {
    callback.validationErrorCallback(e);
  } else {
    e.preventDefault();
  }
}; // Очистка полей формы


var clearForm = function clearForm(form) {
  form.reset();
  var formValidateElements = form.querySelectorAll('[data-validate-type]');
  var notEmptyInputs = form.querySelectorAll('.not-empty');
  var invalidInputs = form.querySelectorAll('.is-invalid');
  notEmptyInputs.forEach(function (notEmptyInput) {
    notEmptyInput.classList.remove('not-empty');
  });
  invalidInputs.forEach(function (invalidInput) {
    invalidInput.classList.remove('is-invalid');
  });
  formValidateElements.forEach(function (formValidateElement) {
    var dataValidateType = formValidateElement.dataset.validateType;

    if (dataValidateType !== 'toggle-group') {
      var formElement = formValidateElement.querySelector('input');

      if (!formElement) {
        formElement = formValidateElement.querySelector('textarea');
      }

      if (!formElement) {
        formElement = formValidateElement.querySelector('select');
      }

      if (!formElement) {
        // eslint-disable-next-line no-console
        console.error('В валидируемом блоке отсутствует поле формы');
        return;
      }

      formElement.value = '';
      checkInputValidity(dataValidateType, formElement);
    } else {
      validateToggleGroup(formValidateElement);
    }
  });
};

window.clearForm = clearForm; // Класс FormsValidate

var FormsValidate = /*#__PURE__*/function () {
  function FormsValidate(wrappers) {
    var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    _classCallCheck(this, FormsValidate);

    this.wrappers = wrappers;
    this.callback = callback;
  }

  _createClass(FormsValidate, [{
    key: "init",
    value: function init(formWrappers) {
      var _this = this;

      if (!formWrappers) {
        formWrappers = this.wrappers;
      }

      var typeOfNode = Object.prototype.toString.call(formWrappers);

      if (typeOfNode === '[object HTMLCollection]' || typeOfNode === '[object NodeList]' || typeOfNode === '[object Array]') {
        formWrappers.forEach(function (wrapper) {
          if (wrapper.classList.contains('is-initialized')) {
            // eslint-disable-next-line no-console
            console.error('На данной форме валидация уже инициализированна');
          } else {
            _this.initItem(wrapper);
          }
        });
      } else if (typeOfNode === '[object HTMLDivElement]' || typeOfNode === '[object HTMLElement]') {
        if (!formWrappers.classList.contains('is-initialized')) {
          this.initItem(formWrappers);
        }
      } else {
        // eslint-disable-next-line no-console
        console.error('Переданный обьект не соответствует формату');
        return;
      }
    }
  }, {
    key: "initItem",
    value: function initItem(element) {
      var _this2 = this;

      element.classList.add('is-initialized');
      var form = element.querySelector('form');
      var resetButtons = form.querySelectorAll('button[type="reset"], [data-reset]');
      form.noValidate = true;
      form.addEventListener('submit', function (e) {
        onFormSubmit(e, _this2.callback);
      });

      if (resetButtons.length) {
        resetButtons.forEach(function (btn) {
          btn.addEventListener('click', function (e) {
            e.preventDefault();
            clearForm(form);
          });
        });
      }

      var formValidateElements = form.querySelectorAll('[data-validate-type]');
      var formLimitationsElements = form.querySelectorAll('[data-limitations]:not([data-validate-type])');
      var formMatrixElements = form.querySelectorAll('[data-matrix]:not([data-validate-type])');

      if (formValidateElements.length) {
        formValidateElements.forEach(function (el) {
          formElementValidateAction(el);
        });
      }

      if (formLimitationsElements.length) {
        formLimitationsElements.forEach(function (el) {
          formElementLimitationsAction(el);
        });
      }

      if (formMatrixElements.length) {
        formMatrixElements.forEach(function (el) {
          formElementMatrixAction(el);
        });
      }
    }
  }]);

  return FormsValidate;
}();


window.FormsValidate = FormsValidate;

/***/ }),

/***/ "./js/modules/form/init-custom-select.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-custom-select.js ***!
  \***********************************************/
/*! exports provided: initCustomSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initCustomSelect", function() { return initCustomSelect; });
/* harmony import */ var _custom_select__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_custom-select */ "./js/modules/form/_custom-select.js");


var initCustomSelect = function initCustomSelect() {
  var select01 = document.getElementById('select01');

  if (select01) {
    // eslint-disable-next-line no-unused-vars
    var customSelect = new _custom_select__WEBPACK_IMPORTED_MODULE_0__["default"](select01, {
      name: 'type',
      // значение атрибута name у кнопки
      targetValue: 'all',
      // значение по умолчанию
      options: [['all', 'Все'], ['completed', 'Выполненные'], ['active', 'В работе']],
      // опции
      onSelected: function onSelected(select, option) {
        // выбранное значение
        console.log("\u0412\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0435 \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435: ".concat(select.value)); // индекс выбранной опции

        console.log("\u0418\u043D\u0434\u0435\u043A\u0441 \u0432\u044B\u0431\u0440\u0430\u043D\u043D\u043E\u0439 \u043E\u043F\u0446\u0438\u0438: ".concat(select.selectedIndex)); // выбранный текст опции

        var text = option ? option.textContent : '';
        console.log("\u0412\u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439 \u0442\u0435\u043A\u0441\u0442 \u043E\u043F\u0446\u0438\u0438: ".concat(text));
        var toDoItems = document.querySelectorAll('.to-do__item');
        toDoItems.forEach(function (item) {
          if (select.value === 'completed') {
            if (!item.classList.contains('checked')) {
              item.classList.add('is-hidden');
            } else {
              item.classList.remove('is-hidden');
            }
          }

          if (select.value === 'active') {
            if (item.classList.contains('checked')) {
              item.classList.add('is-hidden');
            } else {
              item.classList.remove('is-hidden');
            }
          }

          if (select.value === 'all') {
            item.classList.remove('is-hidden');
          }
        });
      }
    });
  }
};



/***/ }),

/***/ "./js/modules/form/init-form-validate.js":
/*!***********************************************!*\
  !*** ./js/modules/form/init-form-validate.js ***!
  \***********************************************/
/*! exports provided: initFormValidate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initFormValidate", function() { return initFormValidate; });
/* harmony import */ var _form_validate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./form-validate */ "./js/modules/form/form-validate.js");

var formWrappers = document.querySelectorAll('[data-validate]');

var resetForm = function resetForm(form) {
  setTimeout(function () {
    window.clearForm(form);
  }, 1000);
};

var baseValidationSuccessCallback = function baseValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target);
};

var baseValidationErrorCallback = function baseValidationErrorCallback(e) {
  e.preventDefault();
};

var customExampleValidationSuccessCallback = function customExampleValidationSuccessCallback(e) {
  e.preventDefault(); // В данном колбеке бэкендер будет писать запрос на отправку формы на сервер и обрабатывать возможные ошибки при отправке

  resetForm(e.target); // eslint-disable-next-line no-console

  console.log('Ваша форма успешна отправлена');
};

var customExampleValidationErrorCallback = function customExampleValidationErrorCallback(e) {
  e.preventDefault(); // eslint-disable-next-line no-console

  console.error('Отправка формы невозможна, заполните все обязательные поля');
};

var callbacks = {
  base: {
    // Колбек при успешной валидации формы при попытке её отправки
    validationSuccessCallback: baseValidationSuccessCallback,
    // Колбек при не успешной валидации формы при попытке её отправки, не связан с запросами на сервер
    validationErrorCallback: baseValidationErrorCallback
  },
  customExample: {
    validationSuccessCallback: customExampleValidationSuccessCallback,
    validationErrorCallback: customExampleValidationErrorCallback
  }
};

var setCustomPhoneInputsEvent = function setCustomPhoneInputsEvent() {
  if (document.querySelectorAll('[data-validate-type="phone"] input').length) {
    document.querySelector('html').addEventListener('input', function (_ref) {
      var target = _ref.target;

      if (target.closest('[data-validate-type="phone"]')) {
        target.closest('[data-validate-type="phone"]').querySelector('input').dispatchEvent(new Event('input'));
      }
    });
  }
};

var initFormValidate = function initFormValidate() {
  if (formWrappers.length) {
    setCustomPhoneInputsEvent();
    formWrappers.forEach(function (wrapper) {
      var callback = wrapper.dataset.callback;

      if (!callback) {
        callback = 'base';
      }

      var formValidate = new _form_validate__WEBPACK_IMPORTED_MODULE_0__["default"](wrapper, callbacks[callback]);
      return formValidate.init();
    });
  }
};



/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");

var modals; // Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };
// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  }
};

var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');

  if (modalElements.length) {
    modalElements.forEach(function (el) {
      setTimeout(function () {
        el.classList.remove('modal--preload');
      }, 100);
    });
  }

  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings); // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда

  window.modals = modals;
};



/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }



var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Modals);

    this._scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["ScrollLock"]();
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);

    this._init();
  }

  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;

      if (!this._settings[settingKey]) {
        return;
      }

      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-open-modal]')) {
        return;
      }

      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;

      if (!this._modalName) {
        return;
      }

      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';

      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;

      if (!target.closest('[data-close-modal]')) {
        return;
      }

      this.close(target.closest('[data-modal]').dataset.modal);
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');

        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;

      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));

      if (!modal || modal.classList.contains('is-active')) {
        return;
      }

      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');

      if (this._openedModalElement) {
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }

      this._setSettings(modalName);

      modal.classList.add('is-active');

      if (!this._openedModalElement) {
        this._scrollLock.disableScrolling();
      }

      if (this._openCallback) {
        this._openCallback();
      }

      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }

      setTimeout(function () {
        _this._addListeners(modal);

        _this._autoPlay(modal);

        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;

      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);

      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }

      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }

      modal.classList.remove('is-active');

      this._removeListeners(modal);

      this._stopInteractive(modal);

      if (this._closeCallback) {
        this._closeCallback();
      }

      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enableScrolling();
        }, this._eventTimeout);
      }

      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);

      this._setSettings('default');

      this._enableScrolling = true;
    }
  }]);

  return Modals;
}();

/***/ }),

/***/ "./js/modules/to-do.js":
/*!*****************************!*\
  !*** ./js/modules/to-do.js ***!
  \*****************************/
/*! exports provided: initToDo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initToDo", function() { return initToDo; });
/* eslint-disable valid-jsdoc */
// Скрипт для ToDo-списка - начало -
var initToDo = function initToDo() {
  var toDoText = document.querySelector('.to-do__input');
  var addTaskBtn = document.querySelector('.to-do__add-btn');
  var toDoWrapper = document.querySelector('.to-do__items');
  var dbUrl = 'https://jsonplaceholder.typicode.com/todos';
  /**
  * Создаём переменную для хранения объектов-экземпляров задач ToDo-списка
  * Если в localStorage пусто, то массив будет пустым иначе наполняем его
  * объектами из localStorage
  */

  var localToDoTaskItems = null;

  if (!localStorage.taskItems) {
    localToDoTaskItems = [];
  } else {
    localToDoTaskItems = JSON.parse(localStorage.getItem('taskItems'));
  }
  /**
  * Берем данные из БД. Здесь используется тестовая API https://jsonplaceholder.typicode.com/
  * @return объект промиса
  */


  function getAllTodos() {
    return new Promise(function (resolve) {
      fetch(new Request(dbUrl)).then(function (response) {
        return response.json();
      }).then(function (data) {
        resolve(data);
      });
    });
  }
  /**
  * Функция отрисовывает разметку айтемов из БД, используя темплейт.
  * А также навешивает слушатель клика и обработчик на кнопку удаления
  */


  var fillHTMLRemoteTaskItems = function fillHTMLRemoteTaskItems() {
    // Работаем с данными из промиса
    getAllTodos().then(function (allRemoteTodos) {
      var remoteTodoItems = allRemoteTodos.slice(0, 5); // берем не более 5 айтемов с БД

      remoteTodoItems.forEach(function (item, index) {
        item.completed = false;
        toDoWrapper.innerHTML += createTemplate(item, index);
        toDoWrapper.addEventListener('click', function (e) {
          var parentEl = e.target.closest('.to-do__item');
          var inputLabelValue = parentEl.querySelector('.custom-checkbox__span').innerText;

          if (e.target === parentEl.querySelector('.to-do__btn-close') && item.title === inputLabelValue) {
            parentEl.style.display = 'none';
          }
        });
      });
    });
  };
  /**
  * Функция-конструктор для создания объектов-экземпляров задач ToDo-списка
  * @param {*} taskItemText принимает текст задачи
  */


  function Task(taskItemText) {
    this.taskItemText = taskItemText;
    this.completed = false;
  }
  /**
  * Функция для создания html-разметки (темплейта) задачи ToDo-списка
  * @param {*} taskItem принимает текст задачи
  * @param {*} index и её индекс в массиве объектов-задач
  * @return возвращает разметку экземпляра задачи
  */


  var createTemplate = function createTemplate(taskItem, index) {
    var ToDoItemTemplate = "\n\t\t<li class=\"to-do__item ".concat(taskItem.completed ? 'checked' : '', "\">\n\t\t\t<div class=\"to-do__custom-checkbox custom-checkbox\">\n\t\t\t\t<label class=\"custom-checkbox__label\">\n\t\t\t\t\t<input class=\"custom-checkbox__input\" id=\"item_").concat(index + 1, "\" type=\"checkbox\" ").concat(taskItem.completed ? 'checked' : '', " name=\"to-do-check\" value=\"value-01\">\n\t\t\t\t\t<span class=\"custom-checkbox__span\">").concat(taskItem.taskItemText ? taskItem.taskItemText : taskItem.title, "</span>\n\t\t\t\t</label>\n\t\t\t</div>\n\t\t\t<button class=\"btn to-do__btn-close\" type=\"button\">\n\t\t\t\t<svg width=\"10\" height=\"10\" aria-hidden=\"true\">\n\t\t\t\t\t<use xlink:href=\"#icon-close-bold\"></use>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t</li>\n\t\t");
    return ToDoItemTemplate;
  };
  /**
   * Функция заполняет родительский контейнер списка дел html-элементами,
   * созданными из объектов-задач списка дел
   */


  var fillHtmlTaskItems = function fillHtmlTaskItems() {
    fillHTMLRemoteTaskItems();
    toDoWrapper.innerHTML = '';

    if (localToDoTaskItems.length > 0) {
      localToDoTaskItems.forEach(function (item, index) {
        toDoWrapper.innerHTML += createTemplate(item, index);
      });
    }
  };

  fillHtmlTaskItems();
  /**
   * Функция очищает поле ввода после добавления задачи
   */

  var clearToDoTextInput = function clearToDoTextInput() {
    setTimeout(function () {
      toDoText.value = '';
    }, 300);
  };
  /**
  * Функция обновления локального хранилища
  */


  var updateLocalStorage = function updateLocalStorage() {
    localStorage.setItem('taskItems', JSON.stringify(localToDoTaskItems));
  };
  /**
   * Функция для обновления локального хранилища и отрисовки списка дел
   */


  var renderTaskItems = function renderTaskItems() {
    updateLocalStorage();
    fillHtmlTaskItems();
  }; // Навешиваем слушатель события клика по кнопке добавления задачи ToDo-списка


  addTaskBtn.addEventListener('click', function () {
    localToDoTaskItems.push(new Task(toDoText.value));
    renderTaskItems();
    clearToDoTextInput();
  }); // Навешиваем слушатель события клавиши Enter на инпут для добавления задачи ToDo-списка

  toDoText.addEventListener('keydown', function (e) {
    var targetKey = e.key;

    if (targetKey === 'Enter') {
      localToDoTaskItems.push(new Task(toDoText.value));
      renderTaskItems();
      clearToDoTextInput();
    }
  }); // Делегируем слушателя и обработчики на родительский элемент, чтобы иметь возможность взаимодействовать с задачами

  toDoWrapper.addEventListener('click', function (e) {
    var parentEl = e.target.closest('.to-do__item');
    var inputLabelValue = parentEl.querySelector('.custom-checkbox__span').innerText;
    localToDoTaskItems.forEach(function (taskItem) {
      if (taskItem.taskItemText === inputLabelValue) {
        if (e.target === parentEl.querySelector('.custom-checkbox__span')) {
          taskItem.completed = !taskItem.completed;
          renderTaskItems();
        }

        if (e.target === parentEl.querySelector('.to-do__btn-close')) {
          var index = localToDoTaskItems.indexOf(taskItem);
          localToDoTaskItems.splice(index, 1);
          fillHtmlTaskItems();
        }
      }
    });
  });
};

 // Скрипт для ToDo-списка - конец -

/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);

    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }

  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;

      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }

        if (this._focusableElements.length === 1) {
          evt.preventDefault();

          this._focusableElements[0].focus();

          return;
        }

        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();

          this._focusableElements[0].focus();

          return;
        }
      }

      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();

        this._focusableElements[0].focus();
      }

      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();

        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);

      if (!lockedElement) {
        return;
      }

      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;

      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];

      if (this._endElement) {
        this._endElement.blur();
      }

      if (startElement && startFocus) {
        startElement.focus();
      }

      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }

      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);

  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform) // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");


var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};



/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! exports provided: ScrollLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollLock", function() { return ScrollLock; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);

    this._iosChecker = _ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"];
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }

  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;

      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();

      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");

        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }

      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;

      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });

      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);

  return ScrollLock;
}();
window.scrollLock = new ScrollLock();

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map